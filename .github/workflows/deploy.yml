name: build and Deploy mdBook

on:
  # https://github.com/orgs/community/discussions/25615
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository }}
    steps:
      - name: Checkout source repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup EditorConfig Checker
        uses: editorconfig-checker/action-editorconfig-checker@main

      - name: Run EditorConfig Checker
        run: editorconfig-checker

      - name: Setup mdBook
        uses: peaceiris/actions-mdbook@v2
        with:
          mdbook-version: 'latest'

      - name: Setup image optimizers and code minifiers
        run: |
          sudo apt-get update
          sudo apt-get install -y webp
          npm i -g svgo terser html-minifier-terser clean-css-cli

      # https://github.com/rust-lang/mdBook/issues/2052
      - name: Setup mdBook extension - CJK (Multiple language) Search
        run: |
          mkdir -p vendor/cjk-search
          curl -o vendor/cjk-search/fzf.umd.js https://raw.githubusercontent.com/allfunc/docker-mdbook/refs/heads/main/mdbook-demo/assets/fzf.umd.js
          curl -o vendor/cjk-search/elasticlunr.js https://raw.githubusercontent.com/allfunc/docker-mdbook/refs/heads/main/mdbook-demo/assets/elasticlunr.js

      - name: Generate version link
        run: v="$(git describe --tags)" && echo "[$v](https://github.com/cyraivndle2/gpg-tutorial/commit/$(git rev-parse HEAD))" > src/.version

      - name: Build book
        run: mdbook build

      - name: Optimize images
        run: |
          # PNG/JPG/JPEG 转换为 WebP 并删除原始 PNG/JPG/JPEG
          find book -type f \( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' \) -print0 \
            | xargs -0 -n1 -P8 sh -c 'for f; do cwebp -q 50 -m 6 "$f" -o "${f%.*}.webp"; rm "$f"; done' sh

          # 替换 HTML 中的图片引用为 .webp
          find book -type f -name '*.html' -exec sed -i -E 's/\.(png|jpg|jpeg)"/.webp"/g' {} \;

          # 压缩 SVG（保持原格式）
          find book -type f -iname '*.svg' -exec svgo --multipass --precision=2 {} \;

      - name: Minify code
        run: |
          # 压缩 JS
          find book -type f -name '*.js' -exec terser {} -o {} --compress --mangle \;
          # 压缩 CSS
          find book -type f -name '*.css' -exec cleancss -o {} {} \;
          # 压缩 HTML
          find book -type f -name '*.html' -exec html-minifier-terser \
            --collapse-whitespace --remove-comments --minify-js true --minify-css true \
            -o {} {} \;

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './book'

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch' }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy artifact
        id: deployment
        uses: actions/deploy-pages@v4
